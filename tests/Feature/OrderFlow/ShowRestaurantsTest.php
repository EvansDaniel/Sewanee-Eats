<?php

namespace Tests\Feature\OrderFlow;

use App\CustomClasses\Availability\TimeRangeType;
use App\CustomClasses\ShoppingCart\RestaurantOrderCategory;
use App\Models\Restaurant;
use App\Models\TimeRange;
use Carbon\Carbon;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Tests\TestCase;

class ShowMenuTest extends TestCase
{
    use DatabaseMigrations;

    /**
     * @test
     * Assert that the checkout page is not linked to when the cart is empty
     */
    public function itDoesntDisplayTheCartInNavBarWhenCartEmpty()
    {
        $this->visit(route('list_restaurants'))
            ->dontSee(route('checkout'));
    }

    /**
     * Make sure it displays restaurants when we are open
     * @test
     */
    public function itDisplaysOnDemandRestaurantsWhenOpen()
    {
        $rest = factory(Restaurant::class)->create(['seller_type' => RestaurantOrderCategory::ON_DEMAND]);
        // make a time_range that is available now
        $time_range = factory(TimeRange::class)->create([
            'start_dow' => Carbon::now()->subHours(3)->format('l'),
            'end_dow' => Carbon::now()->addHour(4)->format('l'),
            'start_hour' => Carbon::now()->subHours(3)->hour,
            'end_hour' => Carbon::now()->addHours(4)->hour,
            'time_range_type' => TimeRangeType::SHIFT
        ]);
        // shows the available restaurants image urls, thus showing the restaurants
        $this->visit(route('list_restaurants'))
            ->see($rest->image_url);
    }

    /**
     * @test
     * Determines if people can view the restaurants when a shift is happening now (i.e. business is open)
     */
    public function businessIsOpenWhenItIsSupposedToBe()
    {
        $rest = factory(Restaurant::class)->create(['seller_type' => RestaurantOrderCategory::ON_DEMAND]);
        // make a time_range that is available now
        $time_range = factory(TimeRange::class)->create([
            'start_dow' => Carbon::now()->subHours(3)->format('l'),
            'end_dow' => Carbon::now()->addHours(4)->format('l'),
            'start_hour' => Carbon::now()->subHours(3)->hour,
            'end_hour' => Carbon::now()->addHours(4)->hour,
            'time_range_type' => TimeRangeType::SHIFT
        ]);
        \Log::info($time_range->getStartCarbon());
        \Log::info($time_range->getEndCarbon());
        \Log::info(Carbon::now());
        $this->visit(route('list_restaurants'))
            ->assertViewHas('sellers')->dontSee('Sorry we are closed right now');
    }

    /**
     * @test
     * A basic test example.
     * @return void
     */
    public function itIsClosedEvenIfRestaurantIsOpen()
    {
        $rest = factory(Restaurant::class)->create(['seller_type' => RestaurantOrderCategory::ON_DEMAND]);
        // make a time_range that is available now
        $time_range = factory(TimeRange::class)->create([
            'start_dow' => Carbon::now()->format('l'),
            'end_dow' => Carbon::now()->format('l'),
            'start_hour' => Carbon::now()->subHours(3)->hour,
            'end_hour' => Carbon::now()->addHours(4)->hour,
            'time_range_type' => TimeRangeType::ON_DEMAND
        ]);
        $time_range->restaurant_id = $rest->id;
        $time_range->save();
        $this->visit(route('list_restaurants'))
            ->see('Sorry we are closed right now');
    }

    protected function setUp()
    {
        parent::setUp();
    }

    protected function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
        \Mockery::close();
    }
}
