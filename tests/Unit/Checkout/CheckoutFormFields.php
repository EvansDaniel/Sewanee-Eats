<?php

namespace Tests\Feature\Feature;

use App\CustomClasses\ShoppingCart\CartItem;
use App\CustomClasses\ShoppingCart\ItemType;
use App\CustomClasses\ShoppingCart\RestaurantOrderCategory;
use App\CustomClasses\ShoppingCart\ShoppingCart;
use App\Models\ItemCategory;
use App\Models\MenuItem;
use App\Models\Restaurant;
use App\TestTraits\AvailabilityMaker;
use App\TestTraits\HandlesCartItems;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Support\Facades\Mail;
use Tests\TestCase;

class CheckoutFormFields extends TestCase
{
    use DatabaseMigrations, HandlesCartItems, AvailabilityMaker;
    static $fake_card_number;
    static $fake_sec_num;
    static $fake_expiry_mon;
    static $fake_expiry_year;

    public static function setUpBeforeClass()
    {
        parent::setUpBeforeClass(); // TODO: Change the autogenerated stub
        Mail::fake();
        self::$fake_card_number = 4242424242424242;
        self::$fake_expiry_year = 2019;
        self::$fake_expiry_mon = 12;
        self::$fake_sec_num = 123;
    }

    /**
     * Asserts that the correct venmo fileds are there when
     * ordering from a special restaurant
     * @test
     */
    public function venmoSpecialCheckout()
    {
        // set up the restaurant, item category, and the item
        $rest = factory(Restaurant::class)->create([
            'seller_type' => RestaurantOrderCategory::WEEKLY_SPECIAL,
            'is_available_to_customers' => true
        ]);
        factory(ItemCategory::class)->create();
        $menu_item = factory(MenuItem::class)->create();
        // put the item in the shopping cart, since it is weekly special we don't
        // worry about it being available, but the restaurant needs to be available
        $cart = new ShoppingCart();
        $cart_item = new CartItem($menu_item->id, ItemType::RESTAURANT_ITEM);
        $cart->putItems([$cart_item]);
        $this->makeResourceAvailable($rest, 'restaurant_id');
        $this->visit(route('checkout'))
            ->seePageIs(route('checkout'));
        $this->visit(route('checkout'))
            ->type('Daniel Evans', 'name')
            ->check('payment_type')// venmo
            ->type('venmo username', 'venmo_username')
            ->type('email@yeah.com', 'email_address')
            ->press("Pay Now")
            ->seePageIs(route('thankYou'));
    }

    /**
     * Asserts that the Stripe form for specials works
     * @test
     */
    public function cardSpecialCheckout()
    {
        // set up the restaurant, item category, and the item
        $rest = factory(Restaurant::class)->create([
            'seller_type' => RestaurantOrderCategory::WEEKLY_SPECIAL,
            'is_available_to_customers' => true
        ]);
        factory(ItemCategory::class)->create();
        $menu_item = factory(MenuItem::class)->create();
        // put the item in the shopping cart, since it is weekly special we don't
        // worry about it being available, but the restaurant needs to be available
        $cart = new ShoppingCart();
        $cart_item = new CartItem($menu_item->id, ItemType::RESTAURANT_ITEM);
        $cart->putItems([$cart_item]);
        $this->makeResourceAvailable($rest, 'restaurant_id');
        $this->visit(route('checkout'))
            ->seePageIs(route('checkout'));
        $this->visit(route('checkout'))
            ->type('Daniel Evans', 'name')
            ->type(self::$fake_card_number, 'card_number')
            ->type(self::$fake_sec_num, 'cvc')
            ->type(self::$fake_expiry_mon, 'expire_month')
            ->type(self::$fake_expiry_year, 'expire_year')
            ->type('email@yeah.com', 'email_address')
            ->press("Pay Now");
    }

    /**
     * Asserts that the form has the correct fields for on demand restaurants
     * @test
     */
    public function cardCheckoutForOnDemand()
    {
        // set up the restaurant, item category, and the item
        $rest = factory(Restaurant::class)->create([
            'seller_type' => RestaurantOrderCategory::ON_DEMAND,
            'is_available_to_customers' => true
        ]);
        factory(ItemCategory::class)->create();
        $menu_item = factory(MenuItem::class)->create();
        // put the item in the shopping cart, since it is a on demand restaurant
        // the menu item must be available too, but the restaurant needs to be available
        $cart = new ShoppingCart();
        $this->makeResourceAvailable($menu_item, 'menu_item_id');
        $cart_item = new CartItem($menu_item->id, ItemType::RESTAURANT_ITEM);
        $cart->putItems([$cart_item]);
        $this->makeResourceAvailable($rest, 'restaurant_id');
        $this->visit(route('checkout'))
            ->seePageIs(route('checkout'));
        $this->visit(route('checkout'))
            ->type('Daniel Evans', 'name')
            ->select(1, 'address_loc')// University building
            ->type('building_name', 'building_name')
            ->select('Room Number', 'area_type')
            ->type('203', 'room_number')
            ->type(self::$fake_card_number, 'card_number')
            ->type(self::$fake_sec_num, 'cvc')
            ->type(self::$fake_expiry_mon, 'expire_month')
            ->type(self::$fake_expiry_year, 'expire_year')
            ->type('email@yeah.com', 'email_address')
            ->press("Pay Now");
    }

    /**
     * @test
     */
    public function cardCheckoutAddressForm()
    {
        // set up the restaurant, item category, and the item
        $rest = factory(Restaurant::class)->create([
            'seller_type' => RestaurantOrderCategory::ON_DEMAND,
            'is_available_to_customers' => true
        ]);
        factory(ItemCategory::class)->create();
        $menu_item = factory(MenuItem::class)->create();
        // put the item in the shopping cart, since it is a on demand restaurant
        // the menu item must be available too, but the restaurant needs to be available
        $cart = new ShoppingCart();
        $this->makeResourceAvailable($menu_item, 'menu_item_id');
        $cart_item = new CartItem($menu_item->id, ItemType::RESTAURANT_ITEM);
        $cart->putItems([$cart_item]);
        $this->makeResourceAvailable($rest, 'restaurant_id');
        $this->visit(route('checkout'))
            ->seePageIs(route('checkout'));
        $this->visit(route('checkout'))
            ->type('Daniel Evans', 'name')
            ->select(0, 'address_loc')// actual address
            ->type('735 University Ave.', 'address')
            ->type(self::$fake_card_number, 'card_number')
            ->type(self::$fake_sec_num, 'cvc')
            ->type(self::$fake_expiry_mon, 'expire_month')
            ->type(self::$fake_expiry_year, 'expire_year')
            ->type('email@yeah.com', 'email_address')
            ->press("Pay Now");
    }
}
